configure(subprojects.findAll( {it.properties.isSpringLibrary})) {
    buildscript {
        dependencyManagement {
            imports {
                mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            }
        }
    }

    apply plugin: 'org.springframework.boot'

    jar {
        enabled = true
    }

    bootJar {
        enabled = false
    }
    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-cache'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'io.projectreactor:reactor-test'
    }
}

configure(subprojects.findAll( {it.properties.isSpringService})) {

    buildscript {
        dependencyManagement {
            imports {
                mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
                mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            }
        }

        ext {
            // not explicitly needed in subprojects, as the BOM for Sprint Boot sets this version
            //springFrameworkVersion = dependencyManagement.importedProperties['spring-framework.version']
            //springSecurityVersion = dependencyManagement.importedProperties['spring-security.version']
            //set('springCloudVersion', ${springCloudVersion})
        }
    }
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    bootJar {
        enabled = true
        manifest {
            attributes(
                    'Created-By': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})".toString(),
                    'Built-By': 'local',
                    'Date-Time': buildDateTime,
                    'Build-Date': buildDate,
                    'Build-Time': buildTime,
                    'Built-OS': "${System.properties['os.name']}",
                    'Build-Revision': buildRevision,
                    'Specification-Title': project.name,
                    'Specification-Version': projectVersion,
                    'Specification-Vendor': 'Gagans Pvt Ltd',
                    'Implementation-Title': project.name,
                    'Implementation-Version': projectVersion,
                    'Implementation-Vendor': 'Gagans Pvt Ltd'
            )
        }
    }
    jar {
        enabled = false
    }
    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-cache'
        implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
        //implementation 'org.springframework.security.oauth:spring-security-oauth2:2.5.1.RELEASE'
        //implementation 'org.springframework.security:spring-security-oauth2-jose'

        //implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
        //implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'org.bouncycastle:bcprov-jdk15on:1.70' //Required for password encoders
        implementation 'com.auth0:java-jwt:4.0.0'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.springframework.boot:spring-boot-starter-webflux'
        implementation 'org.springframework.boot:spring-boot-starter-log4j2'
        implementation 'com.lmax:disruptor:3.4.4'

        //implementation 'org.springframework.boot:spring-boot-starter-rsocket'
        implementation 'org.springframework.boot:spring-boot-starter-aop'
        //implementation 'org.springframework.cloud:spring-cloud-starter'
        implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
        compileOnly 'org.projectlombok:lombok'
        developmentOnly 'org.springframework.boot:spring-boot-devtools'
        runtimeOnly 'com.h2database:h2'
        runtimeOnly 'io.r2dbc:r2dbc-h2'
        //implementation 'io.r2dbc:r2dbc-pool'
        runtimeOnly 'org.postgresql:postgresql'
        runtimeOnly 'org.postgresql:r2dbc-postgresql'
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'io.projectreactor:reactor-test'
        testImplementation 'org.springframework.security:spring-security-test'

        implementation 'org.springdoc:springdoc-openapi-starter-webflux-ui:2.0.0'
        implementation 'org.springdoc:springdoc-openapi-starter-common:2.0.0'

        //implementation 'org.springdoc:springdoc-openapi-webflux-ui:1.6.13'
        //implementation 'org.springdoc:springdoc-openapi-security:1.6.13'
        implementation 'org.apache.commons:commons-lang3'

        implementation 'org.flywaydb:flyway-core'
    }

    configurations {
        all {
            exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    test {
        useJUnitPlatform()
    }

    springBoot {
        buildInfo()
    }
}
